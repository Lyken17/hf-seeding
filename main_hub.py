import datetime
import pytz
import os, sys, os.path as osp
import json
import shutil

from huggingface_hub import snapshot_download, hf_hub_url, get_hf_file_metadata
from huggingface_hub.hf_api import HfApi
from hf_torrent.utils import run_command, FORMAT_NAME, enumerate_hf_repo


REPO_BASE_DIR = "hf-repository"
TORRENT_BASE_DIR = "hf-torrent-store"
# FORMAT_NAME = lambda s: s.replace("-", "_").replace("/", "-")
FORMAT_NAME = lambda s: s.replace("/", "--")

TORRENT_SCRIPT = "py3create.py"

def convert_repo_name(repo):
    if "/" in repo:
        args = repo.split("/")
        if len(args) == 2:
            org, name = args
            return f"models--{org}--{name}"
        elif len(args) == 3:
            rtype, org, name = args
            return f"{rtype}--{org}--{name}"
        else:
            raise NotImplementedError
    else:
        return f"models--{repo}"


def main(repo="bert-base-uncased", delete_existing=False, overwrite=False):
    # ==================== Handling model / dataset ====================
    repo_type = "model"
    _repo = repo
    if repo.startswith("datasets"):
        _repo = repo.replace("datasets/", "")
        repo_type = "dataset"

    # ==================== Check whether generated ====================
    meta_info_fpath = osp.join(TORRENT_BASE_DIR, repo, "_hf_torrent.json")
    if osp.exists(meta_info_fpath):
        print(
            "Metainfo file already exists. Checking whether it is generated by the latest commit."
        )
        with open(meta_info_fpath, "r") as fp:
            fpath_mapping = json.load(fp)

        api = HfApi()
        git_hash = api.repo_info(repo_id=_repo, repo_type=repo_type).sha
        if (
            "lastest-commit" in fpath_mapping
            and fpath_mapping["lastest-commit"] == git_hash
            and not overwrite
        ):
            print(f"{repo} => {meta_info_fpath} already generated.")
            return
        else:
            latest_commit = None
            if "lastest-commit" in fpath_mapping:
                latest_commit = fpath_mapping['lastest-commit']
            print(f"Current commit {latest_commit} != remote commit {git_hash} ")
            print(fpath_mapping["lastest-commit"] == git_hash)

    # ==================== Download model ====================
    try:
        model_fpath = snapshot_download(_repo, repo_type=repo_type)
    except Exception as e:
        print(e)
        print("Failed to download model. Skipping.")
        return

    hf_cache_base = osp.dirname(osp.dirname(model_fpath))
    git_hash = osp.basename(model_fpath)

    # ==================== Create torrent for folder (raw naming) ====================
    print("--" * 50)
    print("Generating a single torrent for whole repo. This may take a while")
    torrent_path = osp.join(TORRENT_BASE_DIR, repo, f"_all_raw_hash.torrent")
    os.makedirs(osp.dirname(torrent_path), exist_ok=True)
    repo_name = FORMAT_NAME(repo)
    cmd = f"python {TORRENT_SCRIPT} -t best5 {model_fpath} \
        --name '{git_hash}' \
        --webseed https://huggingface.co/{repo}/resolve/ \
        --webseed https://hf-mirror.com/{repo}/resolve/ \
        --output {torrent_path} --force"
    stdout, stderr = run_command(cmd)
    print(stdout, stderr)
    print(cmd)
    print("--" * 50)

    # ==================== Create torrent for folder (improved naming, but requires WS redirect) ====================
    print("--" * 50)
    print(
        "Generating a single torrent for whole repo with improved naming. This may take a while"
    )
    git_hash = osp.basename(model_fpath)
    torrent_path = osp.join(TORRENT_BASE_DIR, repo, f"_all.torrent")
    os.makedirs(osp.dirname(torrent_path), exist_ok=True)

    # main digits
    repo_folder = f"{convert_repo_name(repo)}--{git_hash[:7]}"  # 7 digits to follow HF conventional length.

    # https://ws.hf-mirror.com/ is reverse proxy to https://huggingface.co/
    # https://r2hf.pyonpyon.today/ is reverse proxy to https://huggingface.co/
    cmd = f"python {TORRENT_SCRIPT} -t best5 {model_fpath} \
        --name '{repo_folder}' \
        --webseed https://ws.hf-mirror.com/ \
        --webseed https://r2hf.pyonpyon.today/ \
        --webseed https://ws.hf-torrent.lzhu.me/ \
        --output {torrent_path} --force"
    stdout, stderr = run_command(cmd)
    print(stdout, stderr)
    print(cmd)
    print("--" * 50)

    # ==================== Create torrents for single-file ====================
    fpath_mapping = {}
    fpath_mapping["fpath2uuid"] = {}
    fpath_mapping["uuid2fpath"] = {}
    for fpath in enumerate_hf_repo(model_fpath):
        print("--" * 50)
        file_name = osp.relpath(fpath, model_fpath)
        etag_hash = osp.basename(osp.realpath(fpath))
        # repo_name = FORMAT_NAME(repo)
        torrent_name = FORMAT_NAME(file_name)

        print(repo_name, "\t", torrent_name, "\t", etag_hash)
        uuid = f"{convert_repo_name(repo)}-{torrent_name}--{etag_hash}"

        torrent_path = osp.join(TORRENT_BASE_DIR, repo, f"{uuid}.torrent")
        os.makedirs(osp.dirname(torrent_path), exist_ok=True)

        # print(repo, repo_type)
        hf_url = hf_hub_url(repo_id=_repo, filename=file_name, repo_type=repo_type)
        hf_meta = get_hf_file_metadata(hf_url)
        commit_hash = hf_meta.commit_hash

        rel_fpath = osp.relpath(fpath, model_fpath)
        fpath_mapping["fpath2uuid"][rel_fpath] = f"{uuid}"
        fpath_mapping["uuid2fpath"][f"{uuid}"] = rel_fpath

        # if osp.exists(torrent_path):
        #     print(f"Skipping {torrent_path} as it already exists.")
        #     print("--" * 50)
        #     continue
        cmd = f"python {TORRENT_SCRIPT} -t best5 {fpath} \
                --name '{uuid}' \
                --webseed https://huggingface.co/{repo}/resolve/{commit_hash}/{file_name} \
                --webseed https://hf-mirror.com/{repo}/resolve/{commit_hash}/{file_name} \
                --output {torrent_path} --force"
        stdout, stderr = run_command(cmd)
        print(stdout, stderr)
        print(cmd)
        print("--" * 50)

    # ==================== Logging meta information ====================
    desired_timezone = pytz.timezone("Asia/Shanghai")
    fpath_mapping["lastest-generated"] = (
        datetime.datetime.now(desired_timezone).strftime("%Y-%m-%d %H:%M:%S")
        + " (Asia/Shanghai)"
    )
    fpath_mapping["lastest-commit"] = git_hash

    with open(osp.join(TORRENT_BASE_DIR, repo, "_hf_torrent.json"), "w") as fp:
        json.dump(fpath_mapping, fp, indent=2)

    if delete_existing:
        print("Removing cache: ", hf_cache_base)
        shutil.rmtree(hf_cache_base)


if __name__ == "__main__":
    import argparse

    # parser = argparse.ArgumentParser(prog='HF Torrent Creator')
    # parser.add_argument('repo')       # positional argument
    # args = parser.parse_args()
    # main(
    #     repo="datasets/Lin-Chen/ShareGPT4V",
    #     overwrite=True,  # dev purpose
    # )

    main(
        repo="facebook/opt-125m",
        overwrite=False,  # dev purpose
    )
